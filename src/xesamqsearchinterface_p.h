/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -c XesamQSearchInterface -p xesamqsearchinterface_p.h:xesamqsearchinterface.cpp search-introspect.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef XESAMQSEARCHINTERFACE_P_H_1211883136
#define XESAMQSEARCHINTERFACE_P_H_1211883136

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.xesam.Search
 */
class XesamQSearchInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.xesam.Search"; }

public:
    XesamQSearchInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~XesamQSearchInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<void> CloseSearch(const QString &search_handle)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(search_handle);
        return callWithArgumentList(QDBus::Block, QLatin1String("CloseSearch"), argumentList);
    }

    inline QDBusReply<void> CloseSession(const QString &session_handle)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(session_handle);
        return callWithArgumentList(QDBus::Block, QLatin1String("CloseSession"), argumentList);
    }

    inline QDBusReply<quint32> GetHitCount(const QString &search_handle)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(search_handle);
        return callWithArgumentList(QDBus::Block, QLatin1String("GetHitCount"), argumentList);
    }

    inline QDBusReply<QList <QVariantList> > GetHitData(const QString &search_handle, const QList<quint32> &hit_ids, const QStringList &fields)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(search_handle) << qVariantFromValue(hit_ids) << qVariantFromValue(fields);
        return callWithArgumentList(QDBus::Block, QLatin1String("GetHitData"), argumentList);
    }

    inline QDBusReply<QList<QVariantList> > GetHits(const QString &search_handle, quint32 count)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(search_handle) << qVariantFromValue(count);
        return callWithArgumentList(QDBus::Block, QLatin1String("GetHits"), argumentList);
    }

    inline QDBusReply<QDBusVariant> GetProperty(const QString &session_handle, const QString &key)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(session_handle) << qVariantFromValue(key);
        return callWithArgumentList(QDBus::Block, QLatin1String("GetProperty"), argumentList);
    }

    inline QDBusReply<QStringList> GetState()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("GetState"), argumentList);
    }

    inline QDBusReply<QString> NewSearch(const QString &session_handle, const QString &query_xml)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(session_handle) << qVariantFromValue(query_xml);
        return callWithArgumentList(QDBus::Block, QLatin1String("NewSearch"), argumentList);
    }

    inline QDBusReply<QString> NewSession()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("NewSession"), argumentList);
    }

    inline QDBusReply<QDBusVariant> SetProperty(const QString &session_handle, const QString &key, const QDBusVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(session_handle) << qVariantFromValue(key) << qVariantFromValue(value);
        return callWithArgumentList(QDBus::Block, QLatin1String("SetProperty"), argumentList);
    }

    inline QDBusReply<void> StartSearch(const QString &search_handle)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(search_handle);
        return callWithArgumentList(QDBus::Block, QLatin1String("StartSearch"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void HitsAdded(const QString &search_handle, quint32 count);
    void HitsModified(const QString &search_handle, const QList<quint32> &hit_ids);
    void HitsRemoved(const QString &search_handle, const QList<quint32> &hit_ids);
    void SearchDone(const QString &search_handle);
    void StateChanged(const QStringList &state_info);
};

namespace org {
  namespace freedesktop {
    namespace xesam {
      typedef ::XesamQSearchInterface Search;
    }
  }
}

Q_DECLARE_METATYPE (QList < quint32>)
Q_DECLARE_METATYPE (QList < QList < QVariant > >)

#endif
